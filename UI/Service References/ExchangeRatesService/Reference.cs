//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace UI.ExchangeRatesService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.nbrb.by/", ConfigurationName="ExchangeRatesService.ExRatesSoap")]
    public interface ExRatesSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/CurrenciesRefDaily", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> CurrenciesRefDailyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/CurrenciesRefMonthly", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> CurrenciesRefMonthlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/StartDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.DateTime> StartDateAsync(int Periodicity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/LastDailyExRatesDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.DateTime> LastDailyExRatesDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/LastMonthlyExRatesDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.DateTime> LastMonthlyExRatesDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/ExRatesDaily", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> ExRatesDailyAsync(System.DateTime onDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/ExRatesMonthly", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> ExRatesMonthlyAsync(System.DateTime onDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/ExRatesDyn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> ExRatesDynAsync(int curId, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/CurrenciesRef", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> CurrenciesRefAsync(int Periodicity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/MetalsLastDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.DateTime> MetalsLastDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/MetalsRef", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> MetalsRefAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/MetalsPrices", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> MetalsPricesAsync(int MetalId, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/IngotsPrices", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> IngotsPricesAsync(System.DateTime onDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/IngotsLastDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.DateTime> IngotsLastDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/StockAddRates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> StockAddRatesAsync(System.DateTime onDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/StockAddRatesLastDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.DateTime> StockAddRatesLastDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/RefRateOnDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> RefRateOnDateAsync(System.DateTime onDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.nbrb.by/RefRateDyn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> RefRateDynAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ExRatesSoapChannel : UI.ExchangeRatesService.ExRatesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExRatesSoapClient : System.ServiceModel.ClientBase<UI.ExchangeRatesService.ExRatesSoap>, UI.ExchangeRatesService.ExRatesSoap {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ExRatesSoapClient() : 
                base(ExRatesSoapClient.GetDefaultBinding(), ExRatesSoapClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.ExRatesSoap.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExRatesSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ExRatesSoapClient.GetBindingForEndpoint(endpointConfiguration), ExRatesSoapClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExRatesSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ExRatesSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExRatesSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ExRatesSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ExRatesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> CurrenciesRefDailyAsync() {
            return base.Channel.CurrenciesRefDailyAsync();
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> CurrenciesRefMonthlyAsync() {
            return base.Channel.CurrenciesRefMonthlyAsync();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> StartDateAsync(int Periodicity) {
            return base.Channel.StartDateAsync(Periodicity);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> LastDailyExRatesDateAsync() {
            return base.Channel.LastDailyExRatesDateAsync();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> LastMonthlyExRatesDateAsync() {
            return base.Channel.LastMonthlyExRatesDateAsync();
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> ExRatesDailyAsync(System.DateTime onDate) {
            return base.Channel.ExRatesDailyAsync(onDate);
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> ExRatesMonthlyAsync(System.DateTime onDate) {
            return base.Channel.ExRatesMonthlyAsync(onDate);
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> ExRatesDynAsync(int curId, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.ExRatesDynAsync(curId, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> CurrenciesRefAsync(int Periodicity) {
            return base.Channel.CurrenciesRefAsync(Periodicity);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> MetalsLastDateAsync() {
            return base.Channel.MetalsLastDateAsync();
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> MetalsRefAsync() {
            return base.Channel.MetalsRefAsync();
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> MetalsPricesAsync(int MetalId, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.MetalsPricesAsync(MetalId, fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> IngotsPricesAsync(System.DateTime onDate) {
            return base.Channel.IngotsPricesAsync(onDate);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> IngotsLastDateAsync() {
            return base.Channel.IngotsLastDateAsync();
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> StockAddRatesAsync(System.DateTime onDate) {
            return base.Channel.StockAddRatesAsync(onDate);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> StockAddRatesLastDateAsync() {
            return base.Channel.StockAddRatesLastDateAsync();
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> RefRateOnDateAsync(System.DateTime onDate) {
            return base.Channel.RefRateOnDateAsync(onDate);
        }
        
        public System.Threading.Tasks.Task<UI.ExchangeRatesService.ArrayOfXElement> RefRateDynAsync() {
            return base.Channel.RefRateDynAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ExRatesSoap)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.ExRatesSoap)) {
                return new System.ServiceModel.EndpointAddress("http://www.nbrb.by/Services/ExRates.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ExRatesSoapClient.GetBindingForEndpoint(EndpointConfiguration.ExRatesSoap);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ExRatesSoapClient.GetEndpointAddress(EndpointConfiguration.ExRatesSoap);
        }
        
        public enum EndpointConfiguration {
            
            ExRatesSoap,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.ServiceReference.Platforms", "14.0.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement() {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes {
            get {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema() {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer) {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader) {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            ) {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element)) {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else {
                    reader.Skip();
                }
            }
        }
    }
}
